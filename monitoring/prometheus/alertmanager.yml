# AlertManager Configuration for MCP Server LangGraph
# ===================================================
# This configuration routes alerts to different receivers based on severity.
#
# USAGE:
#   - Configure receivers with actual webhook URLs, emails, or PagerDuty keys
#   - Adjust routing rules based on your team's notification preferences
#   - Set appropriate grouping intervals to reduce alert noise
#
# RECEIVERS:
#   - critical: PagerDuty for immediate response
#   - warning: Slack for team awareness
#   - info: Email for informational alerts
#   - default: Fallback receiver (logs only in dev)

global:
  # Default timeout for all receivers
  resolve_timeout: 5m

  # SMTP configuration for email alerts (optional)
  # smtp_smarthost: 'smtp.gmail.com:587'
  # smtp_from: 'alerts@example.com'
  # smtp_auth_username: 'alerts@example.com'
  # smtp_auth_password: 'your-password'
  # smtp_require_tls: true

# Templates for custom alert formatting
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Route tree for alert distribution
route:
  # Root route - applies to all alerts
  receiver: 'default'

  # Group alerts by these labels
  group_by: ['alertname', 'severity', 'component']

  # How long to wait before sending initial notification
  group_wait: 10s

  # How long to wait before sending a batch of new alerts
  group_interval: 10s

  # How long to wait before re-sending a resolved alert
  repeat_interval: 12h

  # Child routes with specific matchers
  routes:
    # Critical alerts - immediate notification
    - match:
        severity: critical
      receiver: pagerduty
      group_wait: 0s
      group_interval: 5m
      repeat_interval: 4h
      continue: true  # Also send to other receivers

    # Critical alerts also go to Slack
    - match:
        severity: critical
      receiver: slack-critical
      group_wait: 10s
      group_interval: 5m
      repeat_interval: 4h

    # Warning alerts - team notification
    - match:
        severity: warning
      receiver: slack-warnings
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h

    # Info alerts - email digest
    - match:
        severity: info
      receiver: email
      group_wait: 5m
      group_interval: 30m
      repeat_interval: 24h

    # Security alerts - dedicated channel
    - match:
        component: security
      receiver: slack-security
      group_wait: 0s
      group_interval: 1m
      repeat_interval: 1h
      continue: true

    # SLA alerts - dedicated routing
    - match_re:
        sla_metric: '.*'
      receiver: slack-sla
      group_wait: 1m
      group_interval: 5m
      repeat_interval: 6h

# Inhibition rules - suppress alerts when other alerts are firing
inhibit_rules:
  # Suppress warning if critical alert is firing for same component
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'component', 'instance']

  # Suppress individual service alerts if overall service is down
  - source_match:
      alertname: 'ServiceDown'
    target_match_re:
      alertname: '(HighErrorRate|HighResponseTime|.*)'
    equal: ['job']

  # Suppress dependency alerts if the dependency is known to be down
  - source_match_re:
      alertname: '(KeycloakDown|RedisSessionStoreDown|OpenFGAConnectionFailing)'
    target_match_re:
      alertname: '(AuthenticationFailureSpike|SessionStoreErrors|AuthorizationFailureSpike)'
    equal: ['job']

# Receivers - notification destinations
receivers:
  # Default receiver (development - logs only)
  - name: 'default'
    webhook_configs:
      - url: 'http://localhost:5001/webhook'
        send_resolved: true

  # PagerDuty for critical alerts
  - name: 'pagerduty'
    pagerduty_configs:
      - routing_key: '<YOUR_PAGERDUTY_INTEGRATION_KEY>'
        severity: '{{ .GroupLabels.severity }}'
        description: '{{ .GroupLabels.alertname }}: {{ .CommonAnnotations.summary }}'
        details:
          firing: '{{ .Alerts.Firing | len }}'
          resolved: '{{ .Alerts.Resolved | len }}'
          description: '{{ .CommonAnnotations.description }}'
          runbook_url: '{{ .CommonAnnotations.runbook_url }}'
          dashboard_url: '{{ .CommonAnnotations.dashboard_url }}'
        # PagerDuty is disabled by default - uncomment to enable
        # send_resolved: true

  # Slack for critical alerts
  - name: 'slack-critical'
    slack_configs:
      - api_url: '<YOUR_SLACK_WEBHOOK_URL_CRITICAL>'
        channel: '#alerts-critical'
        title: ':fire: Critical Alert: {{ .GroupLabels.alertname }}'
        text: |
          *Summary:* {{ .CommonAnnotations.summary }}
          *Description:* {{ .CommonAnnotations.description }}
          *Severity:* {{ .GroupLabels.severity }}
          *Component:* {{ .GroupLabels.component }}
          *Firing:* {{ .Alerts.Firing | len }} | *Resolved:* {{ .Alerts.Resolved | len }}
        color: 'danger'
        send_resolved: true
        # Uncomment to mention specific users or groups
        # username: 'AlertManager'
        # icon_emoji: ':fire:'

  # Slack for warnings
  - name: 'slack-warnings'
    slack_configs:
      - api_url: '<YOUR_SLACK_WEBHOOK_URL_WARNINGS>'
        channel: '#alerts-warnings'
        title: ':warning: Warning: {{ .GroupLabels.alertname }}'
        text: |
          *Summary:* {{ .CommonAnnotations.summary }}
          *Description:* {{ .CommonAnnotations.description }}
          *Component:* {{ .GroupLabels.component }}
        color: 'warning'
        send_resolved: true

  # Slack for security alerts
  - name: 'slack-security'
    slack_configs:
      - api_url: '<YOUR_SLACK_WEBHOOK_URL_SECURITY>'
        channel: '#security-alerts'
        title: ':rotating_light: Security Alert: {{ .GroupLabels.alertname }}'
        text: |
          *Summary:* {{ .CommonAnnotations.summary }}
          *Description:* {{ .CommonAnnotations.description }}
          *Severity:* {{ .GroupLabels.severity }}

          *Action Required:* Investigate immediately
          *Runbook:* {{ .CommonAnnotations.runbook_url }}
        color: 'danger'
        send_resolved: true

  # Slack for SLA alerts
  - name: 'slack-sla'
    slack_configs:
      - api_url: '<YOUR_SLACK_WEBHOOK_URL_SLA>'
        channel: '#sla-monitoring'
        title: ':chart_with_downwards_trend: SLA Alert: {{ .GroupLabels.alertname }}'
        text: |
          *SLA Metric:* {{ .GroupLabels.sla_metric }}
          *Summary:* {{ .CommonAnnotations.summary }}
          *Description:* {{ .CommonAnnotations.description }}
          *Dashboard:* {{ .CommonAnnotations.dashboard }}
        color: '{{ if eq .GroupLabels.severity "critical" }}danger{{ else }}warning{{ end }}'
        send_resolved: true

  # Email for info alerts
  - name: 'email'
    email_configs:
      - to: 'team@example.com'
        from: 'alerts@example.com'
        smarthost: 'smtp.gmail.com:587'
        auth_username: 'alerts@example.com'
        auth_password: '<YOUR_SMTP_PASSWORD>'
        headers:
          Subject: '[{{ .GroupLabels.severity | toUpper }}] {{ .GroupLabels.alertname }}'
        html: |
          <h2>Alert: {{ .GroupLabels.alertname }}</h2>
          <p><strong>Summary:</strong> {{ .CommonAnnotations.summary }}</p>
          <p><strong>Description:</strong> {{ .CommonAnnotations.description }}</p>
          <p><strong>Severity:</strong> {{ .GroupLabels.severity }}</p>
          <p><strong>Component:</strong> {{ .GroupLabels.component }}</p>
          <hr>
          <p><strong>Firing Alerts:</strong> {{ .Alerts.Firing | len }}</p>
          <p><strong>Resolved Alerts:</strong> {{ .Alerts.Resolved | len }}</p>
          {{ if .CommonAnnotations.runbook_url }}
          <p><a href="{{ .CommonAnnotations.runbook_url }}">View Runbook</a></p>
          {{ end }}
          {{ if .CommonAnnotations.dashboard_url }}
          <p><a href="{{ .CommonAnnotations.dashboard_url }}">View Dashboard</a></p>
          {{ end }}
        send_resolved: true

  # Webhook for custom integrations
  - name: 'webhook'
    webhook_configs:
      - url: 'http://your-webhook-endpoint:5001/alerts'
        send_resolved: true
        http_config:
          bearer_token: '<YOUR_WEBHOOK_TOKEN>'
