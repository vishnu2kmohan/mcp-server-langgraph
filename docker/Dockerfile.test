# Test Runner Dockerfile
# ======================
# Optimized image for running integration tests with uv
#
# FEATURES:
#   - Uses uv for 10-100x faster dependency installation
#   - Only test dependencies (from dependency-groups)
#   - Test environment variables pre-configured
#   - Fast builds with layer caching and lockfile

FROM python:3.12-slim

# Set working directory
WORKDIR /app

# Install system dependencies for testing
# Note: curl needed for health checks in some tests
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install uv - Fast Python package manager
COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Export all dependencies (including dev/test) to requirements format
RUN --mount=type=cache,target=/root/.cache/uv \
    uv export --frozen --no-hashes --no-emit-project --all-extras > /tmp/requirements.txt

# Copy source code
COPY src/ ./src/
COPY tests/ ./tests/

# Install Python dependencies with uv (10-100x faster than pip)
# Includes all test dependencies from lockfile
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install --python $(which python) --no-cache -r /tmp/requirements.txt && \
    uv pip install --python $(which python) --no-cache --no-deps -e .

# Set test environment variables
ENV TESTING=true
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Disable observability during tests for cleaner output
ENV ENABLE_TRACING=false
ENV ENABLE_METRICS=false
ENV ENABLE_CONSOLE_EXPORT=false

# Set pytest default options
ENV PYTEST_ADDOPTS="-v --tb=short --strict-markers"

# Default command runs integration tests using uv run
# Can be overridden in docker-compose or docker run
CMD ["pytest", "-m", "integration", "-v", "--tb=short"]

# Health check (useful if running as long-lived service)
HEALTHCHECK NONE
