apiVersion: apps/v1
kind: Deployment
metadata:
  name: langgraph-agent
  namespace: langgraph-agent
  labels:
    app: langgraph-agent
    version: v1
spec:
  replicas: 3
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: langgraph-agent
  template:
    metadata:
      labels:
        app: langgraph-agent
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics/prometheus"
    spec:
      serviceAccountName: langgraph-agent
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # Init container to wait for dependencies
      initContainers:
      - name: wait-for-openfga
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          until nc -z openfga 8080; do
            echo "Waiting for OpenFGA..."
            sleep 2
          done
          echo "OpenFGA is ready!"

      containers:
      - name: langgraph-agent
        image: langgraph-agent:latest
        imagePullPolicy: IfNotPresent

        ports:
        - name: http
          containerPort: 8000
          protocol: TCP

        env:
        - name: SERVICE_NAME
          value: "langgraph-mcp-agent"
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: langgraph-agent-config
              key: environment
        - name: OPENFGA_API_URL
          value: "http://openfga:8080"
        - name: OTLP_ENDPOINT
          value: "http://otel-collector:4317"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: langgraph-agent-config
              key: log_level

        # Secrets from Kubernetes Secret or External Secrets Operator
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: anthropic-api-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: jwt-secret-key
        - name: OPENFGA_STORE_ID
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: openfga-store-id
        - name: OPENFGA_MODEL_ID
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: openfga-model-id

        # Infisical credentials (optional)
        - name: INFISICAL_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: infisical-client-id
              optional: true
        - name: INFISICAL_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: infisical-client-secret
              optional: true
        - name: INFISICAL_PROJECT_ID
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: infisical-project-id
              optional: true

        # Health check probes
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30

        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Resource limits and requests
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi

        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL

        # Volume mounts for temporary files
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache

      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}

      # Affinity rules for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - langgraph-agent
              topologyKey: kubernetes.io/hostname

      # Tolerations for node taints
      tolerations:
      - key: "workload"
        operator: "Equal"
        value: "ai-agents"
        effect: "NoSchedule"
