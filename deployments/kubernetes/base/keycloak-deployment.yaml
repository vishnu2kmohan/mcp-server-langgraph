---
# Keycloak - Identity and Access Management
# Provides SSO, user management, and OAuth2/OIDC integration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: langgraph-agent
  labels:
    app: keycloak
    component: identity
spec:
  replicas: 2  # HA setup
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
        component: identity
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: langgraph-agent

      # Init container to wait for PostgreSQL
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          until nc -z postgres 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:23.0
        imagePullPolicy: IfNotPresent

        args:
          - start
          - --http-enabled=true
          - --http-port=8080
          - --hostname-strict=false
          - --hostname-strict-https=false
          - --health-enabled=true
          - --metrics-enabled=true
          - --log-level=INFO

        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: https
          containerPort: 8443
          protocol: TCP

        env:
        # Admin credentials from secret
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: keycloak-admin-username
              optional: true
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: keycloak-admin-password
              optional: true

        # Database configuration
        - name: KC_DB
          value: "postgres"
        - name: KC_DB_URL
          value: "jdbc:postgresql://postgres:5432/keycloak"
        - name: KC_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: postgres-username
              optional: true
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: langgraph-agent-secrets
              key: postgres-password
              optional: true

        # Hostname configuration
        - name: KC_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: langgraph-agent-config
              key: keycloak_hostname
              optional: true
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: KC_HOSTNAME_STRICT
          value: "false"
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: "false"
        - name: KC_PROXY
          value: "edge"  # For load balancer/ingress

        # Health check probes
        startupProbe:
          httpGet:
            path: /health/started
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 60  # Keycloak takes time to start

        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Resource limits
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi

        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Keycloak needs write access
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL

        # Volume mounts for cache and temp
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /opt/keycloak/data/tmp

      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}

      # Affinity rules for HA
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - keycloak
              topologyKey: kubernetes.io/hostname
