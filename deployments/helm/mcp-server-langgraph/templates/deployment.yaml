apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mcp-server-langgraph.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mcp-server-langgraph.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "mcp-server-langgraph.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "mcp-server-langgraph.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mcp-server-langgraph.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      {{- if .Values.openfga.enabled }}
      initContainers:
      - name: wait-for-openfga
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          until nc -z {{ .Release.Name }}-openfga 8080; do
            echo "Waiting for OpenFGA..."
            sleep 2
          done
          echo "OpenFGA is ready!"
      {{- end }}

      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: {{ .Values.config.serviceName | quote }}
        - name: ENVIRONMENT
          value: {{ .Values.config.environment | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.config.logLevel | quote }}

        # LLM Provider Configuration
        - name: LLM_PROVIDER
          value: {{ .Values.config.llmProvider | quote }}
        - name: MODEL_NAME
          value: {{ .Values.config.modelName | quote }}
        - name: MODEL_TEMPERATURE
          value: {{ .Values.config.modelTemperature | quote }}
        - name: MODEL_MAX_TOKENS
          value: {{ .Values.config.modelMaxTokens | quote }}
        - name: MODEL_TIMEOUT
          value: {{ .Values.config.modelTimeout | quote }}
        - name: ENABLE_FALLBACK
          value: {{ .Values.config.enableFallback | quote }}

        # Agent Configuration
        - name: MAX_ITERATIONS
          value: {{ .Values.config.maxIterations | quote }}
        - name: ENABLE_CHECKPOINTING
          value: {{ .Values.config.enableCheckpointing | quote }}

        # Observability Configuration
        - name: ENABLE_TRACING
          value: {{ .Values.config.enableTracing | quote }}
        - name: ENABLE_METRICS
          value: {{ .Values.config.enableMetrics | quote }}
        - name: ENABLE_CONSOLE_EXPORT
          value: {{ .Values.config.enableConsoleExport | quote }}
        - name: OBSERVABILITY_BACKEND
          value: {{ .Values.config.observabilityBackend | quote }}
        - name: LANGSMITH_TRACING
          value: {{ .Values.config.langsmithTracing | quote }}

        # Authentication Configuration
        - name: AUTH_PROVIDER
          value: {{ .Values.config.authProvider | quote }}
        - name: AUTH_MODE
          value: {{ .Values.config.authMode | quote }}

        # Keycloak Configuration
        - name: KEYCLOAK_SERVER_URL
          value: {{ .Values.config.keycloakServerUrl | quote }}
        - name: KEYCLOAK_REALM
          value: {{ .Values.config.keycloakRealm | quote }}
        - name: KEYCLOAK_CLIENT_ID
          value: {{ .Values.config.keycloakClientId | quote }}
        - name: KEYCLOAK_VERIFY_SSL
          value: {{ .Values.config.keycloakVerifySsl | quote }}
        - name: KEYCLOAK_TIMEOUT
          value: {{ .Values.config.keycloakTimeout | quote }}
        - name: KEYCLOAK_HOSTNAME
          value: {{ .Values.config.keycloakHostname | quote }}

        # Session Management Configuration
        - name: SESSION_BACKEND
          value: {{ .Values.config.sessionBackend | quote }}
        - name: REDIS_URL
          value: {{ .Values.config.redisUrl | quote }}
        - name: REDIS_SSL
          value: {{ .Values.config.redisSsl | quote }}
        - name: SESSION_TTL_SECONDS
          value: {{ .Values.config.sessionTtlSeconds | quote }}
        - name: SESSION_SLIDING_WINDOW
          value: {{ .Values.config.sessionSlidingWindow | quote }}
        - name: SESSION_MAX_CONCURRENT
          value: {{ .Values.config.sessionMaxConcurrent | quote }}

        # OpenFGA Configuration
        {{- if .Values.openfga.enabled }}
        - name: OPENFGA_API_URL
          value: "http://{{ .Release.Name }}-openfga:{{ .Values.openfga.service.port }}"
        {{- end }}
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: anthropic-api-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: jwt-secret-key
        - name: OPENFGA_STORE_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: openfga-store-id
        - name: OPENFGA_MODEL_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: openfga-model-id

        # Keycloak Secrets
        - name: KEYCLOAK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: keycloak-client-secret

        # Redis Session Management Secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: redis-password
              optional: true

        # LangSmith Observability (optional)
        - name: LANGSMITH_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: langsmith-api-key
              optional: true

        # Google API Key (optional)
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: google-api-key
              optional: true

        # OpenAI API Key (optional)
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: openai-api-key
              optional: true

        # Secrets Management (optional)
        - name: INFISICAL_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: infisical-client-id
              optional: true
        - name: INFISICAL_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: infisical-client-secret
              optional: true
        - name: INFISICAL_PROJECT_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "mcp-server-langgraph.secretName" . }}
              key: infisical-project-id
              optional: true
        startupProbe:
          httpGet:
            path: {{ .Values.healthChecks.startup.path }}
            port: http
          initialDelaySeconds: {{ .Values.healthChecks.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthChecks.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.healthChecks.startup.timeoutSeconds }}
          failureThreshold: {{ .Values.healthChecks.startup.failureThreshold }}
        livenessProbe:
          httpGet:
            path: {{ .Values.healthChecks.liveness.path }}
            port: http
          initialDelaySeconds: {{ .Values.healthChecks.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthChecks.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthChecks.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.healthChecks.liveness.failureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.healthChecks.readiness.path }}
            port: http
          initialDelaySeconds: {{ .Values.healthChecks.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthChecks.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthChecks.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.healthChecks.readiness.failureThreshold }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
