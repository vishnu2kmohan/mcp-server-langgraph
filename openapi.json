{
  "openapi": "3.1.0",
  "info": {
    "title": "MCP Server with LangGraph",
    "description": "AI Agent with fine-grained authorization and observability - StreamableHTTP transport",
    "version": "2.7.0"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint with server info",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "Authenticate user and return JWT token\n\nThis endpoint accepts username and password, validates credentials,\nand returns a JWT token that can be used for subsequent tool calls.\n\nThe token should be included in the 'token' field of all tool call requests.\n\nExample:\n    POST /auth/login\n    {\n        \"username\": \"alice\",\n        \"password\": \"alice123\"\n    }\n\n    Response:\n    {\n        \"access_token\": \"eyJ...\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 3600,\n        \"user_id\": \"user:alice\",\n        \"username\": \"alice\",\n        \"roles\": [\"user\", \"premium\"]\n    }",
        "operationId": "login_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Refresh Token",
        "description": "Refresh authentication token\n\nSupports two refresh methods:\n1. Keycloak: Uses refresh_token to get new access token\n2. InMemory: Validates current token and issues new one\n\nExample (Keycloak):\n    POST /auth/refresh\n    {\n        \"refresh_token\": \"eyJ...\"\n    }\n\nExample (InMemory):\n    POST /auth/refresh\n    {\n        \"current_token\": \"eyJ...\"\n    }\n\nResponse:\n    {\n        \"access_token\": \"eyJ...\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 3600,\n        \"refresh_token\": \"eyJ...\"  // Keycloak only\n    }",
        "operationId": "refresh_token_auth_refresh_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/message": {
      "post": {
        "summary": "Handle Message",
        "description": "Handle MCP messages via StreamableHTTP POST\n\nThis is the main endpoint for MCP protocol messages.\nSupports both regular and streaming responses.",
        "operationId": "handle_message_message_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tools": {
      "get": {
        "summary": "List Tools",
        "description": "List available tools (convenience endpoint)",
        "operationId": "list_tools_tools_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/resources": {
      "get": {
        "summary": "List Resources",
        "description": "List available resources (convenience endpoint)",
        "operationId": "list_resources_resources_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/users/me/data": {
      "get": {
        "tags": [
          "GDPR Compliance"
        ],
        "summary": "Get User Data",
        "description": "Export all user data (GDPR Article 15 - Right to Access)\n\nReturns all personal data associated with the authenticated user.\n\n**GDPR Article 15**: The data subject shall have the right to obtain from the\ncontroller confirmation as to whether or not personal data concerning him or\nher are being processed, and access to the personal data.\n\n**Response**: Complete JSON export of all user data including:\n- User profile\n- Sessions\n- Conversations\n- Preferences\n- Audit log\n- Consents",
        "operationId": "get_user_data_api_v1_users_me_data_get",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HTTPAuthorizationCredentials"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Credentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me/export": {
      "get": {
        "tags": [
          "GDPR Compliance"
        ],
        "summary": "Export User Data",
        "description": "Export user data in portable format (GDPR Article 20 - Right to Data Portability)\n\n**GDPR Article 20**: The data subject shall have the right to receive the personal\ndata concerning him or her in a structured, commonly used and machine-readable format.\n\n**Query Parameters**:\n- `format`: Export format (json or csv)\n\n**Response**: File download in requested format",
        "operationId": "export_user_data_api_v1_users_me_export_get",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(json|csv)$",
              "description": "Export format: json or csv",
              "default": "json",
              "title": "Format"
            },
            "description": "Export format: json or csv"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HTTPAuthorizationCredentials"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Credentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "patch": {
        "tags": [
          "GDPR Compliance"
        ],
        "summary": "Update User Profile",
        "description": "Update user profile (GDPR Article 16 - Right to Rectification)\n\n**GDPR Article 16**: The data subject shall have the right to obtain from the\ncontroller without undue delay the rectification of inaccurate personal data\nconcerning him or her.\n\n**Request Body**: Profile fields to update (only provided fields are updated)\n\n**Response**: Updated user profile",
        "operationId": "update_user_profile_api_v1_users_me_patch",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_user_profile_api_v1_users_me_patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "GDPR Compliance"
        ],
        "summary": "Delete User Account",
        "description": "Delete user account and all data (GDPR Article 17 - Right to Erasure)\n\n**WARNING**: This is an irreversible operation that permanently deletes all user data.\n\n**GDPR Article 17**: The data subject shall have the right to obtain from the\ncontroller the erasure of personal data concerning him or her without undue delay.\n\n**Query Parameters**:\n- `confirm`: Must be set to `true` to confirm deletion\n\n**What gets deleted**:\n- User profile and account\n- All sessions\n- All conversations and messages\n- All preferences and settings\n- All authorization tuples\n\n**What gets anonymized** (retained for compliance):\n- Audit logs (user_id replaced with hash)\n\n**Response**: Deletion result with details",
        "operationId": "delete_user_account_api_v1_users_me_delete",
        "parameters": [
          {
            "name": "confirm",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "description": "Must be true to confirm account deletion",
              "title": "Confirm"
            },
            "description": "Must be true to confirm account deletion"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HTTPAuthorizationCredentials"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Credentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me/consent": {
      "get": {
        "tags": [
          "GDPR Compliance"
        ],
        "summary": "Get Consent Status",
        "description": "Get current consent status (GDPR Article 21 - Right to Object)\n\nReturns all consent preferences for the authenticated user.\n\n**Response**: Current consent status for all consent types",
        "operationId": "get_consent_status_api_v1_users_me_consent_get",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HTTPAuthorizationCredentials"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Credentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "GDPR Compliance"
        ],
        "summary": "Update Consent",
        "description": "Update user consent preferences (GDPR Article 21 - Right to Object)\n\n**GDPR Article 21**: The data subject shall have the right to object at any time\nto processing of personal data concerning him or her.\n\n**Request Body**: Consent type and whether it's granted\n\n**Response**: Current consent status for all types",
        "operationId": "update_consent_api_v1_users_me_consent_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_consent_api_v1_users_me_consent_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_update_consent_api_v1_users_me_consent_post": {
        "properties": {
          "consent": {
            "$ref": "#/components/schemas/ConsentRecord"
          },
          "credentials": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HTTPAuthorizationCredentials"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "consent"
        ],
        "title": "Body_update_consent_api_v1_users_me_consent_post"
      },
      "Body_update_user_profile_api_v1_users_me_patch": {
        "properties": {
          "profile_update": {
            "$ref": "#/components/schemas/UserProfileUpdate"
          },
          "credentials": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HTTPAuthorizationCredentials"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "profile_update"
        ],
        "title": "Body_update_user_profile_api_v1_users_me_patch"
      },
      "ConsentRecord": {
        "properties": {
          "consent_type": {
            "$ref": "#/components/schemas/ConsentType",
            "description": "Type of consent"
          },
          "granted": {
            "type": "boolean",
            "title": "Granted",
            "description": "Whether consent is granted"
          },
          "timestamp": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timestamp",
            "description": "ISO timestamp (auto-generated)"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address",
            "description": "IP address (auto-captured)"
          },
          "user_agent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Agent",
            "description": "User agent (auto-captured)"
          }
        },
        "type": "object",
        "required": [
          "consent_type",
          "granted"
        ],
        "title": "ConsentRecord",
        "description": "Consent record for GDPR Article 21",
        "example": {
          "consent_type": "analytics",
          "granted": true
        }
      },
      "ConsentType": {
        "type": "string",
        "enum": [
          "analytics",
          "marketing",
          "third_party",
          "profiling"
        ],
        "title": "ConsentType",
        "description": "Types of consent that can be granted or revoked"
      },
      "HTTPAuthorizationCredentials": {
        "properties": {
          "scheme": {
            "type": "string",
            "title": "Scheme"
          },
          "credentials": {
            "type": "string",
            "title": "Credentials"
          }
        },
        "type": "object",
        "required": [
          "scheme",
          "credentials"
        ],
        "title": "HTTPAuthorizationCredentials",
        "description": "The HTTP authorization credentials in the result of using `HTTPBearer` or\n`HTTPDigest` in a dependency.\n\nThe HTTP authorization header value is split by the first space.\n\nThe first part is the `scheme`, the second part is the `credentials`.\n\nFor example, in an HTTP Bearer token scheme, the client will send a header\nlike:\n\n```\nAuthorization: Bearer deadbeef12346\n```\n\nIn this case:\n\n* `scheme` will have the value `\"Bearer\"`\n* `credentials` will have the value `\"deadbeef12346\"`"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LoginRequest": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Username",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Password",
            "description": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "LoginRequest",
        "description": "Login request with username and password"
      },
      "LoginResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "JWT access token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Token type (always 'bearer')",
            "default": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In",
            "description": "Token expiration in seconds"
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User identifier"
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Roles",
            "description": "User roles"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "expires_in",
          "user_id",
          "username",
          "roles"
        ],
        "title": "LoginResponse",
        "description": "Login response with JWT token"
      },
      "RefreshTokenRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "Refresh token (Keycloak only)"
          },
          "current_token": {
            "type": "string",
            "title": "Current Token",
            "description": "Current access token (for InMemory provider)"
          }
        },
        "type": "object",
        "title": "RefreshTokenRequest",
        "description": "Token refresh request"
      },
      "RefreshTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "New JWT access token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Token type",
            "default": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In",
            "description": "Token expiration in seconds"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "New refresh token (Keycloak only)"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "expires_in"
        ],
        "title": "RefreshTokenResponse",
        "description": "Token refresh response"
      },
      "UserProfileUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "User's full name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "User's email address"
          },
          "preferences": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferences",
            "description": "User preferences"
          }
        },
        "type": "object",
        "title": "UserProfileUpdate",
        "description": "User profile update model (GDPR Article 16 - Right to Rectification)",
        "example": {
          "email": "alice.smith@acme.com",
          "name": "Alice Smith",
          "preferences": {
            "language": "en",
            "theme": "dark"
          }
        }
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "mcp",
      "description": "Model Context Protocol (MCP) endpoints for agent interaction"
    },
    {
      "name": "health",
      "description": "Health check and system status endpoints"
    },
    {
      "name": "auth",
      "description": "Authentication and authorization endpoints"
    }
  ]
}
