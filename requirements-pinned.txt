# Production dependencies with pinned versions
# Generated for production deployment stability

# LangGraph and LangChain (pinned)
# Note: langgraph 1.0.0 is production/stable
langgraph==1.0.1  # Updated from 1.0.0 - patch release
langchain-core==1.0.0

# LiteLLM for multi-provider LLM support
litellm==1.78.5  # Updated from 1.78.3 - provider bug fixes

# MCP Server
mcp==1.18.0

# Authentication
PyJWT==2.10.1  # Updated from 2.8.0 for security improvements
cryptography==46.0.3
bcrypt==5.0.0  # Updated from 4.0.0 - strict password length validation (72 byte limit)

# OpenTelemetry Core
# Pinned to 1.38.0 (matches pyproject.toml requirements)
# OpenTelemetry exporters require SDK version match (~=)
opentelemetry-api==1.38.0
opentelemetry-sdk==1.38.0

# OpenTelemetry Instrumentation
# Must match SDK version (0.59b0 for SDK 1.38.0)
opentelemetry-instrumentation-logging==0.59b0

# OpenTelemetry Exporters
opentelemetry-exporter-otlp-proto-grpc==1.38.0
opentelemetry-exporter-otlp-proto-http==1.38.0

# Fine-grained Authorization
openfga-sdk==0.9.7  # Updated from 0.5.1 - no breaking changes for used methods (check, write, list_objects)

# Prometheus Monitoring
prometheus-api-client==0.5.5  # For querying Prometheus metrics in SLA monitoring

# Secrets Management - Infisical (OPTIONAL)
# ==========================================
# Infisical is now an OPTIONAL dependency. The application works without it.
#
# INSTALLATION OPTIONS:
# ---------------------
#
# Option 1: Docker Build (RECOMMENDED - Zero Configuration Required)
#   → Infisical automatically built with Rust toolchain in docker/Dockerfile
#   → No manual installation needed
#   → Works on all platforms
#   → Usage: docker compose up -d
#
# Option 2: pip install with extras (for local development with wheels)
#   → pip install -e ".[secrets]"  # Install with Infisical
#   → Uses infisical-python==2.3.5 (has pre-built wheels for most platforms)
#   → Fastest local installation
#
# Option 3: Manual install with pre-built wheels (alternative)
#   → pip install infisical-python==2.3.5
#   → Compatible with: x86_64 Linux, macOS (Intel/ARM), Windows
#
# Option 4: Build from source with Rust toolchain
#   → Install Rust: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#   → source $HOME/.cargo/env
#   → pip install -r requirements-infisical.txt
#   → Build time: ~2-5 minutes
#
# Option 5: Skip Infisical entirely (use environment variables)
#   → Application falls back to os.getenv() for all secrets
#   → Set secrets in .env file or environment
#   → No Infisical dependency needed
#   → Fully supported configuration
#
# TROUBLESHOOTING:
# ----------------
# - Error: "infisical_client not found"
#   → Normal if Infisical not installed; app uses fallback mode
#
# - Error: "no matching distribution for platform"
#   → Version 2.3.6 lacks x86_64 wheels; use 2.3.5 or Docker
#
# - Error: "cargo not found" or "rustc not found"
#   → Install Rust toolchain OR use Docker OR use pre-built wheels (2.3.5)
#
# For detailed guide: docs/deployment/infisical-installation.md
# For requirements file: requirements-infisical.txt
#
# infisical-python==2.3.5  # Uncomment for local installation with wheels

# Utilities
python-dotenv==1.1.1
pydantic==2.12.3
pydantic-settings==2.11.0
httpx==0.28.1

# Health checks and API
fastapi==0.119.1  # Updated from 0.109.0
uvicorn[standard]==0.38.0  # Updated from 0.27.0

# Additional runtime dependencies
python-multipart==0.0.20  # For FastAPI file uploads (FastAPI 0.119.0 requires >=0.0.17, MCP 1.18.0 requires >=0.0.9)
email-validator==2.3.0  # For pydantic email validation
