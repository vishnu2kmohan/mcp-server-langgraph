[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-server-langgraph"
version = "2.5.0"
description = "Production-ready MCP server with LangGraph, OpenFGA, and multi-LLM support"
readme = "README.md"
authors = [
    {name = "MCP Server with LangGraph Contributors", email = "noreply@github.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10,<3.13"
keywords = ["mcp", "model-context-protocol", "langgraph", "llm", "agent", "anthropic", "openai", "openfga", "authorization", "observability", "opentelemetry", "langchain", "litellm", "multi-llm", "ai-agent"]
dependencies = [
    "langgraph>=0.2.28",
    "langgraph-checkpoint-redis>=0.1.0",  # Redis checkpointer for distributed conversation state (latest: 0.1.2)
    "langchain-core>=0.3.15",
    "langsmith>=0.1.0",
    "litellm>=1.52.3",
    "mcp>=1.1.2",
    "PyJWT>=2.8.0",
    "cryptography>=42.0.2",
    "opentelemetry-api>=1.22.0",
    "opentelemetry-sdk>=1.22.0",
    "opentelemetry-instrumentation-logging>=0.43b0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.22.0",
    "opentelemetry-exporter-otlp-proto-http>=1.22.0",
    "openfga-sdk>=0.5.1",
    # infisical-python moved to optional-dependencies[secrets]
    # Application falls back to environment variables if not installed
    "python-dotenv>=1.0.1",
    "pydantic>=2.5.3",
    "pydantic-settings>=2.1.0",
    "httpx>=0.26.0",
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "python-keycloak>=3.9.0",
    "authlib>=1.3.0",
    "redis[hiredis]>=5.0.0",  # Also used for conversation checkpoints (db 1)
    "pyyaml>=6.0.1",
    "apscheduler>=3.10.4",
    "python-json-logger>=2.0.7",
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    # Property-based testing
    "hypothesis>=6.100.0",
    "hypothesis-jsonschema>=0.22.1",
    # Contract testing
    "jsonschema>=4.21.0",
    "schemathesis>=3.27.0",
    "openapi-spec-validator>=0.7.1",
    # Mutation testing
    "mutmut>=2.4.4",
    # Code quality
    "black>=24.1.1",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "isort>=7.0.0",
    "bandit>=1.7.6",
    # Deployment tools
    "langgraph-cli>=0.1.0",
]

secrets = [
    # Infisical secrets management (requires Rust toolchain or pre-built wheels)
    # See: requirements-infisical.txt for installation options
    # Docker builds: Automatically installed
    # Local builds: See docs/deployment/infisical-installation.md
    "infisical-python>=2.1.7,<2.3.6",
]

all = [
    # Install all optional dependencies
    "infisical-python>=2.1.7,<2.3.6",
]

[project.scripts]
mcp-server-langgraph = "mcp_server_langgraph.mcp.server_stdio:main"
mcp-server-langgraph-http = "mcp_server_langgraph.mcp.server_streamable:main"

[project.urls]
Homepage = "https://github.com/vishnu2kmohan/mcp-server-langgraph"
Documentation = "https://github.com/vishnu2kmohan/mcp-server-langgraph/blob/main/README.md"
Repository = "https://github.com/vishnu2kmohan/mcp-server-langgraph"
Issues = "https://github.com/vishnu2kmohan/mcp-server-langgraph/issues"
Changelog = "https://github.com/vishnu2kmohan/mcp-server-langgraph/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*", "*.tests*", "*.tests"]

[tool.black]
line-length = 127
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 127
skip_gitignore = true

[tool.flake8]
max-line-length = 127
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "htmlcov",
    ".pytest_cache",
    "*.egg-info",
]
# Align with black formatting
extend-ignore = ["E203", "W503"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
# Stricter type checking for production
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
check_untyped_defs = true
# Allow some flexibility for third-party libraries (will be phased out)
disallow_untyped_calls = false
# Exclude test files from strict checking
exclude = [
    "tests/",
    "test_.*\\.py$",
    "conftest\\.py$",
]

# Gradual strictness rollout - Phase 1: Core modules with full strict typing
[[tool.mypy.overrides]]
module = [
    "config",
    "feature_flags",
    "observability",
]
disallow_untyped_calls = true
strict = true

# Phase 2: Auth, LLM, and Agent modules - Now with strict typing
[[tool.mypy.overrides]]
module = [
    "mcp_server_langgraph.auth.*",
    "mcp_server_langgraph.llm.*",
    "mcp_server_langgraph.core.agent",
]
disallow_untyped_calls = true
strict = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Default options for all test runs (matches CI behavior)
# Use --no-cov to skip coverage for faster iteration during development
addopts = "-v --strict-markers --tb=short --cov=src/mcp_server_langgraph --cov-report=term-missing"
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (may require external services)",
    "e2e: End-to-end tests (full system tests)",
    "slow: Slow tests (> 1 second)",
    "auth: Authentication/authorization tests",
    "openfga: OpenFGA integration tests",
    "infisical: Infisical integration tests",
    "mcp: MCP protocol tests",
    "observability: OpenTelemetry/metrics/logging tests",
    "benchmark: Performance benchmark tests",
    "property: Property-based tests (hypothesis)",
    "contract: Contract tests (MCP protocol, OpenAPI)",
    "regression: Performance regression tests",
    "mutation: Mutation testing (slow, runs on schedule)",
    "gdpr: GDPR compliance tests (data subject rights)",
    "soc2: SOC 2 compliance tests (evidence collection, access reviews)",
    "sla: SLA monitoring tests (uptime, response time, error rate)",
]

[tool.coverage.run]
source = ["src/mcp_server_langgraph"]
omit = [
    "*/venv/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/examples/*",
    "*/scripts/*",
    "*/hooks/*",
    "*/langgraph_platform/*",
    "setup.py",
    # MCP server entry points (tested via integration tests)
    "src/mcp_server_langgraph/mcp/server_stdio.py",
    "src/mcp_server_langgraph/mcp/server_streamable.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.hypothesis]
# Property-based testing configuration
max_examples = 100  # Number of test cases to generate
deadline = 5000  # ms - max time per test case
verbosity = "normal"  # normal, verbose, debug
database = ".hypothesis/examples"  # Store failing examples
derandomize = false  # Set true for deterministic testing

[tool.mutmut]
# Mutation testing configuration
paths_to_mutate = [
    "agent.py",
    "auth.py",
    "config.py",
    "feature_flags.py",
    "llm_factory.py",
    "observability.py",
    "openfga_client.py",
]
backup = false
runner = "pytest -x -m unit"  # Fast unit tests only
tests_dir = "tests/"
dict_synonyms = "Struct,NamedStruct"
