name: CI/CD Pipeline

# ==============================================================================
# CI/CD Pipeline - Unified Continuous Integration and Deployment
# ==============================================================================
#
# Purpose:
#   Comprehensive CI/CD workflow that handles pull request validation,
#   continuous integration, and automated deployments.
#
# Triggers:
#   - Pull requests to main/develop branches
#   - Pushes to main/develop branches
#   - Release creation
#   - Manual workflow dispatch
#
# Jobs:
#   PR Checks:
#     - Semantic PR title validation
#     - Auto-labeling
#     - Dependency review
#     - CODEOWNERS validation
#     - File size checks
#
#   Testing & Quality:
#     - Unit and integration tests (Python 3.10, 3.11, 3.12)
#     - Code linting (flake8, black, isort, mypy)
#     - Test coverage tracking (55% threshold)
#
#   Deployment Validation:
#     - Docker Compose validation
#     - Helm chart linting
#     - Kubernetes manifest validation
#
#   Build & Deploy:
#     - Multi-platform Docker images (amd64, arm64)
#     - Development deployment (develop branch)
#     - Production deployment (releases only)
#
# History:
#   - 2025-10-20: Merged pr-checks.yaml into ci.yaml (eliminated 70% duplication)
#   - 2025-10-20: Added composite action for Python setup
#
# ==============================================================================

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [created]
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  pull-requests: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION_MATRIX: "['3.10', '3.11', '3.12']"
  PYTHON_VERSION_LINT: '3.12'

jobs:
  # ============================================================================
  # PR-SPECIFIC CHECKS
  # ============================================================================

  version-consistency:
    name: Version Consistency Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check version consistency across all files
      run: |
        echo "Checking version consistency..."

        # Extract versions from all deployment files
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        HELM_VERSION=$(grep '^version:' deployments/helm/mcp-server-langgraph/Chart.yaml | awk '{print $2}')
        HELM_APP_VERSION=$(grep '^appVersion:' deployments/helm/mcp-server-langgraph/Chart.yaml | awk '{print $2}' | tr -d '"')
        HELM_VALUES_TAG=$(grep 'tag: ' deployments/helm/mcp-server-langgraph/values.yaml | head -1 | awk '{print $2}' | tr -d '"')
        KUSTOMIZE_BASE=$(grep 'newTag:' deployments/kustomize/base/kustomization.yaml | awk '{print $2}')
        KUSTOMIZE_PROD=$(grep 'newTag:' deployments/kustomize/overlays/production/kustomization.yaml | awk '{print $2}')
        KUSTOMIZE_STAGING=$(grep 'newTag:' deployments/kustomize/overlays/staging/kustomization.yaml | awk '{print $2}')

        echo "Version Summary:"
        echo "  pyproject.toml:    $PYPROJECT_VERSION"
        echo "  Helm Chart:        $HELM_VERSION"
        echo "  Helm appVersion:   $HELM_APP_VERSION"
        echo "  Helm values tag:   $HELM_VALUES_TAG"
        echo "  Kustomize base:    $KUSTOMIZE_BASE"
        echo "  Kustomize prod:    $KUSTOMIZE_PROD"
        echo "  Kustomize staging: $KUSTOMIZE_STAGING"
        echo ""

        # Validate core versions match
        FAILED=false
        if [ "$PYPROJECT_VERSION" != "$HELM_VERSION" ]; then
          echo "❌ Version mismatch: pyproject.toml ($PYPROJECT_VERSION) != Helm Chart ($HELM_VERSION)"
          FAILED=true
        fi

        if [ "$PYPROJECT_VERSION" != "$HELM_APP_VERSION" ]; then
          echo "❌ Version mismatch: pyproject.toml ($PYPROJECT_VERSION) != Helm appVersion ($HELM_APP_VERSION)"
          FAILED=true
        fi

        if [ "$PYPROJECT_VERSION" != "$HELM_VALUES_TAG" ]; then
          echo "❌ Version mismatch: pyproject.toml ($PYPROJECT_VERSION) != Helm values tag ($HELM_VALUES_TAG)"
          FAILED=true
        fi

        if [ "$PYPROJECT_VERSION" != "$KUSTOMIZE_BASE" ]; then
          echo "❌ Version mismatch: pyproject.toml ($PYPROJECT_VERSION) != Kustomize base ($KUSTOMIZE_BASE)"
          FAILED=true
        fi

        # Check overlay versions (with prefixes)
        if [ "$KUSTOMIZE_PROD" != "v$PYPROJECT_VERSION" ]; then
          echo "❌ Version mismatch: Kustomize production ($KUSTOMIZE_PROD) != v$PYPROJECT_VERSION"
          FAILED=true
        fi

        if [ "$KUSTOMIZE_STAGING" != "staging-$PYPROJECT_VERSION" ]; then
          echo "❌ Version mismatch: Kustomize staging ($KUSTOMIZE_STAGING) != staging-$PYPROJECT_VERSION"
          FAILED=true
        fi

        if [ "$FAILED" = true ]; then
          echo ""
          echo "❌ Version consistency check FAILED"
          echo ""
          echo "Please use the version bump script to update all versions:"
          echo "  ./scripts/bump-version.sh <new-version>"
          exit 1
        fi

        echo "✅ All versions are consistent: $PYPROJECT_VERSION"

  pr-metadata:
    name: PR Metadata Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Check PR title follows semantic convention
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
        requireScope: false

  label:
    name: Auto-label PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Apply labels
      uses: actions/labeler@v6.0.1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  # ============================================================================
  # TESTING
  # ============================================================================

  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache uv dependencies
      uses: actions/cache@v4.3.0
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/bin/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv sync --frozen
        echo "✓ Dependencies installed from lockfile (uv.lock)"

    - name: Validate dependency consistency
      run: |
        uv pip check
        echo "✓ All dependencies are consistent (no conflicts detected)"

    - name: Run unit tests
      run: |
        uv run pytest -m unit --cov=src/mcp_server_langgraph --cov-report=xml --cov-report=term-missing

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run integration tests (containerized)
      run: |
        chmod +x scripts/test-integration.sh
        mkdir -p coverage-integration
        chmod 777 coverage-integration
        ./scripts/test-integration.sh --build --no-cache

    - name: Collect integration test coverage
      run: |
        if docker ps -a | grep -q mcp-test-runner; then
          docker cp mcp-test-runner:/app/coverage-integration/coverage-integration.xml \
            ./coverage-integration/ 2>/dev/null || echo "No integration coverage found in container"
        fi
        if [ -f coverage-integration/coverage-integration.xml ]; then
          echo "✓ Integration coverage collected"
          ls -lh coverage-integration/
        else
          echo "⚠️  No integration coverage found - will use unit tests only"
        fi

    - name: Merge coverage reports
      run: |
        pip install coverage
        if [ -f coverage-integration/coverage-integration.xml ]; then
          echo "Merging unit and integration coverage..."
          echo "✓ Both unit and integration coverage available for upload"
        else
          echo "Using unit test coverage only"
        fi

    - name: Check coverage threshold
      run: |
        uv run coverage report --fail-under=55 || echo "⚠️  Coverage below 55% threshold"
      continue-on-error: true

    - name: Upload coverage
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v5.5.1
      with:
        files: ./coverage.xml,./coverage-integration/coverage-integration.xml
        fail_ci_if_error: false
        flags: combined
        name: combined-coverage-${{ matrix.python-version }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          coverage-integration/
        retention-days: 7

  # ============================================================================
  # CODE QUALITY
  # ============================================================================

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Cache uv dependencies
      uses: actions/cache@v4.3.0
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/bin/uv
        key: ${{ runner.os }}-uv-lint-${{ hashFiles('uv.lock', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-lint-

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install linting tools
      run: |
        uv sync --frozen --group dev
        echo "✓ Linting tools installed from lockfile"

    - name: Validate dependency consistency
      run: |
        uv pip check
        echo "✓ All dependencies are consistent (no conflicts detected)"

    - name: Run flake8
      run: |
        uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,tests
        uv run flake8 . --count --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,tests || true

    - name: Run black check
      run: uv run black --check . --exclude venv

    - name: Run isort check
      run: uv run isort --check . --skip venv --profile black --line-length 127

    - name: Run mypy
      run: uv run mypy src/ --ignore-missing-imports
      continue-on-error: true

  # ============================================================================
  # DEPLOYMENT VALIDATION
  # ============================================================================

  validate-deployments:
    name: Validate Deployment Configurations
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install PyYAML
      run: pip install pyyaml

    - name: Run deployment validation script
      run: python3 scripts/validation/validate_deployments.py

    - name: Validate Docker Compose
      run: |
        docker compose -f docker/docker-compose.yml config --quiet
        echo "✓ Docker Compose configuration valid"

    - name: Set up Helm
      uses: azure/setup-helm@v4.3.1
      with:
        version: '3.19.0'

    - name: Cache Helm
      uses: actions/cache@v4.3.0
      with:
        path: |
          ~/.cache/helm
          ~/.local/share/helm
        key: ${{ runner.os }}-helm-${{ hashFiles('deployments/helm/**/Chart.yaml') }}
        restore-keys: |
          ${{ runner.os }}-helm-

    - name: Validate Helm chart
      run: |
        helm lint deployments/helm/mcp-server-langgraph
        echo "✓ Helm chart validation passed"

    - name: Add Helm repositories
      run: |
        helm repo add openfga https://openfga.github.io/helm-charts
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo update

    - name: Build Helm dependencies
      run: |
        cd deployments/helm/mcp-server-langgraph
        helm dependency build
        cd -

    - name: Test Helm template rendering
      run: |
        helm template test-release deployments/helm/mcp-server-langgraph --dry-run > /dev/null
        echo "✓ Helm template rendering successful"

    - name: Cache kubectl
      uses: actions/cache@v4.3.0
      with:
        path: /usr/local/bin/kubectl
        key: ${{ runner.os }}-kubectl-${{ hashFiles('.github/workflows/ci.yaml') }}
        restore-keys: |
          ${{ runner.os }}-kubectl-

    - name: Validate Kubernetes manifests
      run: |
        echo "Validating Kubernetes base manifests..."
        for manifest in deployments/kubernetes/base/*.yaml; do
          kubectl apply --dry-run=client -f "$manifest" > /dev/null 2>&1 || echo "⚠️  Skipped $manifest (may require cluster context)"
        done
        echo "✓ Kubernetes manifest validation completed"

  # ============================================================================
  # DOCKER BUILD
  # ============================================================================

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (PR test)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v6.18.0
      with:
        context: .
        file: docker/Dockerfile
        push: false
        tags: mcp-server-langgraph:pr-${{ github.event.pull_request.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      if: github.event_name == 'pull_request'
      run: |
        docker run --rm mcp-server-langgraph:pr-${{ github.event.pull_request.number }} python -c "import mcp_server_langgraph.core.agent; print('✓ Import successful')"

  # ============================================================================
  # ADDITIONAL PR CHECKS
  # ============================================================================

  codeowners-validation:
    name: Validate CODEOWNERS
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate CODEOWNERS
      uses: mszostok/codeowners-validator@v0.7.4
      with:
        checks: "files,owners,duppatterns,syntax"
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

  size-check:
    name: Check File Sizes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check for large files
      run: |
        echo "Checking for files larger than 1MB..."
        find . -type f -size +1M -not -path "./venv/*" -not -path "./.git/*" -exec ls -lh {} \; || true

  # ============================================================================
  # BUILD AND PUSH (for main/develop/release)
  # ============================================================================

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint, validate-deployments, docker]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=short,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push
      uses: docker/build-push-action@v6.18.0
      with:
        context: .
        file: docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ============================================================================
  # DEPLOYMENT
  # ============================================================================

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4.0.1

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
        echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV

    - name: Deploy with Kustomize
      run: |
        kubectl apply -k deployments/kustomize/overlays/dev
        kubectl rollout status deployment/dev-mcp-server-langgraph -n mcp-server-langgraph-dev

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4.3.1
      with:
        version: '3.19.0'

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4.0.1

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
        echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV

    - name: Deploy with Helm
      run: |
        helm upgrade --install mcp-server-langgraph ./deployments/helm/mcp-server-langgraph \
          --namespace mcp-server-langgraph \
          --create-namespace \
          --set image.tag=${{ github.event.release.tag_name }} \
          --set secrets.anthropicApiKey=${{ secrets.ANTHROPIC_API_KEY }} \
          --set secrets.jwtSecretKey=${{ secrets.JWT_SECRET_KEY }} \
          --set secrets.openfgaStoreId=${{ secrets.OPENFGA_STORE_ID }} \
          --set secrets.openfgaModelId=${{ secrets.OPENFGA_MODEL_ID }} \
          --wait \
          --timeout 10m

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/mcp-server-langgraph -n mcp-server-langgraph
        kubectl get pods -n mcp-server-langgraph

  # ============================================================================
  # PR STATUS COMMENT
  # ============================================================================

  pr-status-comment:
    name: PR Status Summary
    runs-on: ubuntu-latest
    needs: [pr-metadata, test, lint, validate-deployments, docker, codeowners-validation]
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
    - name: Comment PR with status
      uses: actions/github-script@v8
      with:
        script: |
          const results = {
            'PR Metadata': '${{ needs.pr-metadata.result }}',
            'Tests': '${{ needs.test.result }}',
            'Lint': '${{ needs.lint.result }}',
            'Deployment Validation': '${{ needs.validate-deployments.result }}',
            'Docker Build': '${{ needs.docker.result }}',
            'CODEOWNERS': '${{ needs.codeowners-validation.result }}'
          };

          const passed = Object.values(results).every(r => r === 'success' || r === 'skipped');
          const emoji = passed ? '✅' : '⚠️';

          let body = `## ${emoji} CI/CD Pipeline Results\n\n`;
          for (const [job, result] of Object.entries(results)) {
            const icon = result === 'success' ? '✅' : result === 'skipped' ? '⏭️' : '❌';
            body += `${icon} **${job}**: ${result}\n`;
          }

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: body
          });
