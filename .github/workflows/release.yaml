name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Never cancel releases

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Extract CHANGELOG section
      id: extract_changelog
      run: |
        # Extract version from tag
        VERSION="${{ github.ref_name }}"
        VERSION_NO_V="${VERSION#v}"

        echo "Extracting CHANGELOG section for version: $VERSION_NO_V"

        # Extract the section for this version from CHANGELOG.md
        # Get content between "## [VERSION]" and next "---" (escape dots in version)
        VERSION_ESCAPED=$(echo "$VERSION_NO_V" | sed 's/\./\\./g')
        sed -n "/^## \[$VERSION_ESCAPED\]/,/^---$/p" CHANGELOG.md | sed '$d' > release_notes.md

        # Check if we got content
        if [ -s release_notes.md ] && [ $(wc -l < release_notes.md) -gt 5 ]; then
          echo "✅ Found CHANGELOG content ($(wc -l < release_notes.md) lines)"
          echo "has_changelog=true" >> $GITHUB_OUTPUT

          # Add deployment info and links
          {
            echo ""
            echo "## 🚀 Quick Start"
            echo ""
            echo "### Docker Images"
            echo ""
            echo "Pull the latest release:"
            echo ""
            echo '```bash'
            echo "docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
            echo "docker pull ghcr.io/${{ github.repository }}:latest"
            echo '```'
            echo ""
            echo "### Helm Deployment"
            echo ""
            echo "Install with Helm:"
            echo ""
            echo '```bash'
            echo "helm upgrade --install mcp-server-langgraph \\"
            echo "  oci://ghcr.io/${{ github.repository }}/charts/mcp-server-langgraph \\"
            echo "  --version ${{ github.ref_name }}"
            echo '```'
            echo ""
            echo "## 📚 Documentation"
            echo ""
            echo "- [Installation Guide](README.md)"
            echo "- [Kubernetes Deployment](docs/deployment/kubernetes.md)"
            echo "- [Testing Guide](docs/development/testing.md)"
            echo "- [Release Process](docs/deployment/RELEASE_PROCESS.md)"
          } >> release_notes.md
        else
          echo "⚠️ No CHANGELOG content found, using fallback"
          echo "has_changelog=false" >> $GITHUB_OUTPUT

          # Fallback: generate from commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges > changelog.txt
          else
            git log --pretty=format:"- %s (%h)" --no-merges --max-count=20 > changelog.txt
          fi

          # Create basic release notes
          {
            echo "## Changes in this Release"
            echo ""
            cat changelog.txt
            echo ""
            echo "## Docker Images"
            echo ""
            echo '```bash'
            echo "docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
            echo "docker pull ghcr.io/${{ github.repository }}:latest"
            echo '```'
            echo ""
            echo "## Documentation"
            echo ""
            echo "- [Installation Guide](README.md)"
            echo "- [Kubernetes Deployment](docs/deployment/kubernetes.md)"
          } > release_notes.md
        fi

    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        bodyFile: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generateReleaseNotes: false  # We provide our own from CHANGELOG.md
        makeLatest: ${{ !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc') }}

  build-and-push:
    name: Build and Push Release Images
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,format=short,prefix=sha-
          type=raw,value=latest

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: docker/Dockerfile
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0.17.8
      with:
        format: spdx-json
        output-file: sbom-${{ matrix.platform }}.spdx.json
        image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.platform }}
        path: sbom-${{ matrix.platform }}.spdx.json
        retention-days: 90

  publish-helm:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.13.0'

    - name: Package Helm chart
      run: |
        helm package deployments/helm/mcp-server-langgraph --version ${{ github.ref_name }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Helm chart
      run: |
        helm push mcp-server-langgraph-${{ github.ref_name }}.tgz oci://ghcr.io/${{ github.repository }}/charts

  attach-sbom:
    name: Attach SBOM to Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push]
    steps:
    - name: Download SBOM artifacts
      uses: actions/download-artifact@v5
      with:
        pattern: sbom-*
        merge-multiple: true

    - name: Attach SBOM to release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref_name }}
        artifacts: "sbom-*.spdx.json"
        allowUpdates: true
        omitBody: true
        omitBodyDuringUpdate: true
        omitName: true
        omitNameDuringUpdate: true

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: create-release
    if: "!contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta')"
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: twine upload dist/*

  update-mcp-registry:
    name: Update MCP Registry
    runs-on: ubuntu-latest
    needs: [build-and-push, publish-helm]
    if: "!contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta')"
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Update manifest version
      run: |
        sed -i 's/"version": ".*"/"version": "${{ github.ref_name }}"/' .mcp/manifest.json
        sed -i 's/"version": ".*"/"version": "${{ github.ref_name }}"/' .mcp/registry.json

    - name: Publish to MCP Registry
      env:
        MCP_REGISTRY_TOKEN: ${{ secrets.MCP_REGISTRY_TOKEN }}
      run: |
        if [ -n "$MCP_REGISTRY_TOKEN" ]; then
          bash scripts/deployment/publish_to_registry.sh
        else
          echo "MCP_REGISTRY_TOKEN not set, skipping registry publication"
        fi

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build-and-push, publish-helm]
    if: always()
    steps:
    - name: Slack Notification
      uses: slackapi/slack-github-action@v2.0.0
      if: ${{ secrets.SLACK_WEBHOOK != '' }}
      with:
        webhook-type: incoming-webhook
        webhook: ${{ secrets.SLACK_WEBHOOK }}
        payload: |
          {
            "text": "🚀 Release ${{ github.ref_name }} Published!",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Release ${{ github.ref_name }} Published!*\n\n*Status:* ${{ job.status }}\n*Docker Image:* `ghcr.io/${{ github.repository }}:${{ github.ref_name }}`\n*Helm Chart:* `oci://ghcr.io/${{ github.repository }}/charts/mcp-server-langgraph`\n\n<${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|View Release>"
                }
              }
            ]
          }
