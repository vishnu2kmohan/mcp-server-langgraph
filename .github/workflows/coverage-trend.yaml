name: Coverage Trend Tracking

# ==============================================================================
# Coverage Trend Tracking - Test Coverage Monitoring
# ==============================================================================
#
# Purpose:
#   Track test coverage trends over time and alert on significant drops.
#   Maintains historical coverage data for trend analysis.
#
# Triggers:
#   - Pushes to main/develop branches
#   - Pull requests to main
#   - Manual workflow dispatch
#
# Features:
#   - Tracks coverage percentage in CSV history (.coverage-history/)
#   - Alerts if coverage drops >5% from previous run
#   - Posts coverage reports on PRs
#   - Uses extracted script: scripts/ci/track-coverage.py
#   - Retains coverage history for 90 days
#
# Alert Thresholds:
#   - 游댮 Significant decrease: >5% drop (fails workflow)
#   - 游리 Decrease: 1-5% drop (warning only)
#   - 游릭 Increase: >1% improvement
#   - 俱뫮잺  No change: -1% to +1%
#
# History:
#   - 2025-10-20: Extracted inline Python to scripts/ci/track-coverage.py
#   - 2025-10-20: Migrated to composite action for Python setup
#
# ==============================================================================

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  track-coverage:
    name: Track Coverage Trends
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for trend analysis

    - name: Setup Python and dependencies
      uses: ./.github/actions/setup-python-deps
      with:
        python-version: '3.12'
        install-test: 'true'
        cache-key-prefix: 'coverage-trend'

    - name: Install coverage tool
      run: pip install coverage

    - name: Download previous coverage data
      uses: actions/download-artifact@v4
      with:
        name: coverage-history
        path: .coverage-history
      continue-on-error: true  # First run won't have history

    - name: Run unit tests with coverage
      run: |
        pytest -m unit --cov=src/mcp_server_langgraph --cov-report=json --cov-report=term-missing

    - name: Track coverage and save to history
      id: coverage
      run: |
        # Run coverage tracking script
        python3 scripts/ci/track-coverage.py \
          --coverage-json coverage.json \
          --history-dir .coverage-history \
          --fail-threshold 5.0

        # Extract coverage for GitHub outputs (for PR comments)
        COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered'])")
        COVERAGE_ROUNDED=$(python -c "import sys; print(f'{float(sys.argv[1]):.1f}')" "$COVERAGE")
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "coverage_rounded=$COVERAGE_ROUNDED" >> $GITHUB_OUTPUT

    - name: Upload coverage history
      uses: actions/upload-artifact@v4
      with:
        name: coverage-history
        path: .coverage-history/
        retention-days: 90

    - name: Calculate coverage change for PR comment
      id: coverage-change
      run: |
        # Extract change data from coverage history for PR comments
        if [ -f .coverage-history/coverage-trend.csv ] && [ $(wc -l < .coverage-history/coverage-trend.csv) -ge 2 ]; then
          PREV_COVERAGE=$(tail -2 .coverage-history/coverage-trend.csv | head -1 | cut -d',' -f3)
          CURR_COVERAGE=${{ steps.coverage.outputs.coverage }}
          CHANGE=$(python -c "print(f'{float('$CURR_COVERAGE') - float('$PREV_COVERAGE'):.1f}')")

          # Determine status emoji
          if (( $(python -c "print(1 if float('$CHANGE') < -5 else 0)") )); then
            STATUS="游댮 Significant decrease"
          elif (( $(python -c "print(1 if float('$CHANGE') < -1 else 0)") )); then
            STATUS="游리 Decrease"
          elif (( $(python -c "print(1 if float('$CHANGE') > 1 else 0)") )); then
            STATUS="游릭 Increase"
          else
            STATUS="俱뫮잺  No change"
          fi

          echo "change=$CHANGE" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
        else
          echo "change=N/A" >> $GITHUB_OUTPUT
          echo "status=游늵 First measurement" >> $GITHUB_OUTPUT
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v8
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage_rounded }}';
          const change = '${{ steps.coverage-change.outputs.change }}';
          const status = '${{ steps.coverage-change.outputs.status }}';

          const body = `## 游늵 Coverage Report

          **Current Coverage:** ${coverage}%
          **Change:** ${change === 'N/A' ? 'First measurement' : change + '%'}
          **Status:** ${status}

          ${change !== 'N/A' && parseFloat(change) < -5 ? '丘멆잺 **Warning:** Coverage decreased by more than 5%' : ''}

          <details>
          <summary>Coverage Trend</summary>

          Run \`make test-coverage-combined\` locally for detailed coverage report.
          View detailed coverage in the workflow artifacts.

          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    # Note: Alert on significant coverage drop is now handled by track-coverage.py
    # The script will exit with code 1 if coverage drops > 5%, failing the workflow
