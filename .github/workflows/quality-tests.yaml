name: Quality Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run weekly on Sunday at midnight
    - cron: '0 0 * * 0'

permissions:
  contents: read
  pull-requests: write

jobs:
  property-tests:
    name: Property-Based Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-pinned.txt
          pip install -r requirements-test.txt

      - name: Run property-based tests
        run: |
          pytest -m property -v --tb=short
        timeout-minutes: 15

      - name: Upload property test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: property-test-results
          path: |
            .hypothesis/
            test-results/

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-pinned.txt
          pip install -r requirements-test.txt

      - name: Generate OpenAPI schema
        run: |
          python scripts/validate_openapi.py || true

      - name: Run contract tests
        run: |
          pytest -m contract -v --tb=short

      - name: Upload OpenAPI schema
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openapi-schema
          path: openapi.json

  regression-tests:
    name: Performance Regression Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-pinned.txt
          pip install -r requirements-test.txt

      - name: Run regression tests
        run: |
          pytest -m regression -v --tb=short

      - name: Check for performance regressions
        run: |
          echo "Comparing against baseline metrics..."
          # Results are checked within the tests themselves

      - name: Upload regression results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: regression-results
          path: |
            tests/regression/
            .benchmarks/

  mutation-tests:
    name: Mutation Testing
    runs-on: ubuntu-latest
    # Only run on schedule or manual trigger (too slow for every PR)
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-pinned.txt
          pip install -r requirements-test.txt

      - name: Run mutation tests
        run: |
          mutmut run --paths-to-mutate=agent.py,auth.py,config.py,feature_flags.py
        timeout-minutes: 60
        continue-on-error: true

      - name: Generate mutation report
        if: always()
        run: |
          mutmut results || true
          mutmut html || true

      - name: Upload mutation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mutation-results
          path: |
            html/
            .mutmut-cache

      - name: Comment PR with mutation score
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Parse mutation results and comment on PR
            const fs = require('fs');
            try {
              const results = fs.readFileSync('.mutmut-cache', 'utf8');
              // Parse and comment (simplified)
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: '## Mutation Testing Results\n\nMutation tests completed. See artifacts for details.'
              });
            } catch (e) {
              console.log('Could not parse mutation results');
            }

  openapi-validation:
    name: OpenAPI Validation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-pinned.txt
          pip install -r requirements-test.txt

      - name: Validate OpenAPI schema
        run: |
          python scripts/validate_openapi.py

      - name: Check for breaking changes
        run: |
          if [ -f openapi.baseline.json ]; then
            echo "Checking for breaking changes..."
            # Validation script handles this
          else
            echo "No baseline schema found - creating one"
            cp openapi.json openapi.baseline.json || true
          fi

      - name: Run API compliance tests
        run: |
          pytest tests/api/ -v --tb=short

      - name: Upload schemas
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openapi-schemas
          path: |
            openapi.json
            openapi.baseline.json

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [property-tests, contract-tests, regression-tests, openapi-validation]
    if: always()

    steps:
      - name: Check quality test results
        run: |
          echo "## Quality Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Property Tests: ${{ needs.property-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Contract Tests: ${{ needs.contract-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Regression Tests: ${{ needs.regression-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- OpenAPI Validation: ${{ needs.openapi-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.property-tests.result }}" = "success" ] && \
             [ "${{ needs.contract-tests.result }}" = "success" ] && \
             [ "${{ needs.regression-tests.result }}" = "success" ] && \
             [ "${{ needs.openapi-validation.result }}" = "success" ]; then
            echo "✅ All quality tests passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "⚠️ Some quality tests failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
