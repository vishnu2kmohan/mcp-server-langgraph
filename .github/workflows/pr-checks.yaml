name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true  # Cancel previous runs for same PR

jobs:
  pr-metadata:
    name: PR Metadata Check
    runs-on: ubuntu-latest
    steps:
    - name: Check PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
        requireScope: false

  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-pinned.txt
        pip install -r requirements-test.txt

    - name: Run tests
      run: |
        pytest -m unit -v --cov=. --cov-report=xml

    - name: Upload coverage
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
        retention-days: 7

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-test.txt

    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,tests
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,tests || true

    - name: Run black
      run: black --check . --exclude venv

    - name: Run isort
      run: isort --check . --skip venv

    - name: Run mypy
      run: mypy src/ --ignore-missing-imports
      continue-on-error: true  # Allow mypy failures for now (strict mode rollout in progress)

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-test.txt

    - name: Run bandit
      run: bandit -r . -x ./tests,./venv -ll -f json -o bandit-report.json || true

    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json
        retention-days: 30

    - name: Run safety check
      run: safety check --json || true

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: mcp-server-langgraph:pr-${{ github.event.pull_request.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm mcp-server-langgraph:pr-${{ github.event.pull_request.number }} python -c "import agent; print('✓ Import successful')"

  size-check:
    name: Check File Sizes
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for large files
      run: |
        echo "Checking for files larger than 1MB..."
        find . -type f -size +1M -not -path "./venv/*" -not -path "./.git/*" -exec ls -lh {} \; || true

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  codeowners-validation:
    name: Validate CODEOWNERS
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate CODEOWNERS
      uses: mszostok/codeowners-validator@v0.7.4
      with:
        checks: "files,owners,duppatterns,syntax"
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true  # Don't fail PR if CODEOWNERS has minor issues

  labeler:
    name: Auto Label
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run labeler
      uses: actions/labeler@v5
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [test, lint, security, docker, codeowners-validation]
    if: always()
    permissions:
      pull-requests: write
    steps:
    - name: Comment PR
      uses: actions/github-script@v8
      with:
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });

          const conclusion = checks.check_runs.every(check =>
            check.conclusion === 'success' || check.conclusion === 'skipped'
          ) ? '✅ All checks passed!' : '⚠️ Some checks failed';

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: `## PR Check Results\n\n${conclusion}\n\nView detailed results above.`
          });
