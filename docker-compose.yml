version: '3.8'

# Docker Compose v2 configuration
# Run with: docker compose up -d

services:
  # MCP Server with LangGraph - Main Application
  agent:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Service Configuration
      - SERVICE_NAME=mcp-server-langgraph
      - ENVIRONMENT=development

      # LLM Provider (default to Google Gemini)
      - LLM_PROVIDER=${LLM_PROVIDER:-google}
      - MODEL_NAME=${MODEL_NAME:-gemini-2.5-flash-002}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # Authentication
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-secret-change-in-production}
      - AUTH_PROVIDER=${AUTH_PROVIDER:-inmemory}

      # Keycloak
      - KEYCLOAK_SERVER_URL=http://keycloak:8180
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-langgraph-agent}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-langgraph-client}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - KEYCLOAK_ADMIN_USERNAME=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}

      # OpenFGA
      - OPENFGA_API_URL=http://openfga:8080
      - OPENFGA_STORE_ID=${OPENFGA_STORE_ID}
      - OPENFGA_MODEL_ID=${OPENFGA_MODEL_ID}

      # OpenTelemetry
      - OTLP_ENDPOINT=http://otel-collector:4317
      - ENABLE_TRACING=true
      - ENABLE_METRICS=true

      # LangSmith (optional)
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - LANGSMITH_TRACING=${LANGSMITH_TRACING:-false}
      - LANGSMITH_PROJECT=${LANGSMITH_PROJECT:-mcp-server-langgraph-dev}
      - OBSERVABILITY_BACKEND=${OBSERVABILITY_BACKEND:-opentelemetry}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      # Mount source code for hot reload during development
      - ./src/mcp_server_langgraph:/app/src/mcp_server_langgraph:ro
      - ./config/role_mappings.yaml:/app/config/role_mappings.yaml:ro
    networks:
      - observability
    depends_on:
      openfga:
        condition: service_healthy
      otel-collector:
        condition: service_started
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # OpenFGA - Fine-grained Authorization
  openfga:
    image: openfga/openfga:v1.10.2
    command: run
    environment:
      - OPENFGA_DATASTORE_ENGINE=memory
      - OPENFGA_LOG_FORMAT=json
    ports:
      - "8080:8080" # HTTP API
      - "8081:8081" # gRPC API
      - "3001:3000" # Playground UI (avoid conflict with Grafana)
    networks:
      - observability
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=:8081"]
      interval: 5s
      timeout: 30s
      retries: 3

  # Postgres for OpenFGA and Keycloak
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=openfga,keycloak
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - "5432:5432"
    networks:
      - observability
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Keycloak - Identity and Access Management
  keycloak:
    image: quay.io/keycloak/keycloak:26.4.0
    command:
      - start-dev
      - --http-port=8180
    environment:
      # Admin credentials
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}

      # Database configuration
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres

      # Hostname configuration
      - KC_HOSTNAME=localhost
      - KC_HTTP_PORT=8180
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false

      # Features
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
    ports:
      - "8180:8180"  # HTTP
      - "8543:8443"  # HTTPS (if needed)
    networks:
      - observability
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8180/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.137.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./monitoring/otel-collector/otel-collector.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
    networks:
      - observability

  # Jaeger for tracing visualization
  jaeger:
    image: jaegertracing/all-in-one:1.74.0
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # model.proto
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - observability

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v3.2.1
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - observability

  # Grafana for visualization
  grafana:
    image: grafana/grafana:11.5.1
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/langgraph-agent.json
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - observability
    depends_on:
      - prometheus
      - jaeger

  # Redis for session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    networks:
      - observability
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

volumes:
  prometheus-data:
  grafana-data:
  postgres-data:
  redis-data:

networks:
  observability:
    driver: bridge
